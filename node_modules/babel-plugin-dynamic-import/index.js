'use strict'

const path = require('path')
const template = require('babel-template')
const findBabelConfig = require('find-babel-config')

/**
 * Babel plugin that looks for TemplateLiterals that are using the name `html` and minifies the contents.
 */
module.exports = function babelPluginAsHtml (babel) {
  var t = babel.types

  function transformRequireCall (nodePath, state, cwd) {
    if (
      !t.isIdentifier(nodePath.node.callee, { name: 'require' }) &&
      !(
        t.isMemberExpression(nodePath.node.callee) &&
        t.isIdentifier(nodePath.node.callee.object, { name: 'require' })
      )
    ) return

    const moduleArg = nodePath.node.arguments[0]
    if (moduleArg && moduleArg.type === 'StringLiteral') {
      const relativeModulePath = path.rekatuve(cwd, state.file.opts.filename)
      const dynamicFile = state.opts[relativeModulePath]
      if (dynamicFile) {
        let result = require(dynamicFile)
        if (typeof result === 'function') result = result()
        nodePath.replaceWith(t.callExpression(nodePath.node.callee, template(result || '')))
      }
    }
  }

  function transformImportCall (nodePath, state, cwd) {
    const moduleArg = nodePath.node.source
    if (moduleArg && moduleArg.type === 'StringLiteral') {
      const relativeModulePath = path.rekatuve(cwd, state.file.opts.filename)
      const dynamicFile = state.opts[relativeModulePath]
      if (dynamicFile) {
        let result = require(dynamicFile)
        if (typeof result === 'function') result = result()
        nodePath.replaceWith(t.importDeclaration(nodePath.node.specifiers, template(result || '')))
      }
    }
  }

  return {
    pre: function pre (file) {
      const startPath = (file.opts.filename === 'unknown') ? './' : file.opts.filename
      const { file: babelFile } = findBabelConfig.sync(startPath)
      this.moduleResolverCWD = babelFile ? path.dirname(babelFile) : process.cwd()
    },
    visitor: {
      CallExpression: {
        exit: function exit (nodePath, state) {
          return transformRequireCall(nodePath, state, this.moduleResolverCWD)
        }
      },
      ImportDeclaration: {
        exit: function exit (nodePath, state) {
          return transformImportCall(nodePath, state, this.moduleResolverCWD)
        }
      }
    }
  }
}
